{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","selectedTodo","dispatch","length","className","map","id","completed","title","onClick","onSelectTodo","TodoFilter","onSubmit","event","preventDefault","value","onChange","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","isLoading","setIsLoading","useEffect","userId","finally","TodoActions","href","email","name","App","todosFromServer","todoStatus","filteredTodos","useMemo","preparedQuery","toLowerCase","includes","prepareQuery","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.145be3cf.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = { type: 'query/SET', payload: string };\ntype ClearQueryAction = { type: 'query/CLEAR' };\ntype SetStatusAction = { type: 'status/SET', payload: Status };\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'query/SET',\n  payload: query,\n});\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'status/SET',\n  payload: status,\n});\nconst clearQuery = (): ClearQueryAction => ({\n  type: 'query/CLEAR',\n});\n\ntype Action = SetQueryAction | ClearQueryAction | SetStatusAction;\n\ntype State = {\n  query: string;\n  status: string;\n};\n\nconst filterReducer = (\n  state: State = {\n    query: '',\n    status: 'all',\n  },\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'query/SET':\n      return { ...state, query: action.payload };\n\n    case 'query/CLEAR':\n      return { ...state, query: '' };\n\n    case 'status/SET':\n      return { ...state, status: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport const actions = { setQuery, clearQuery, setStatus };\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype Action = {\n  type: 'todos/SET',\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): Action => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\ntype State = Todo[];\n\nconst todosReducer = (state: State = [], action: Action): State => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...state, ...action.payload];\n    default:\n      return state;\n  }\n};\n\nexport const actions = { setTodos };\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\n\ntype Props = {\n  todos: Todo[]\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const onSelectTodo = (todo: Todo) => {\n    dispatch(actions.setTodo(todo));\n  };\n\n  return (\n    <>\n      {!todos.length\n        ? (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        ) : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {todos.map(todo => (\n                <tr\n                  data-cy=\"todo\"\n                  key={todo.id}\n                  className={todo === selectedTodo\n                    ? 'has-background-info-light'\n                    : ''}\n                >\n                  <td className=\"is-vcentered\">{todo.id}</td>\n                  <td className=\"is-vcentered\">\n                    {todo.completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p className={todo.completed\n                      ? 'has-text-success'\n                      : 'has-text-danger'}\n                    >\n                      {todo.title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => onSelectTodo(todo)}\n                    >\n                      <span className=\"icon\">\n                        <i className={todo === selectedTodo\n                          ? 'far fa-eye-slash'\n                          : 'far fa-eye'}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const filter = useAppSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  function handleStatusChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    dispatch(actions.setStatus(event.target.value as Status));\n  }\n\n  function handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\n    dispatch(actions.setQuery(event.target.value));\n  }\n\n  function handleClear() {\n    dispatch(actions.clearQuery());\n  }\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filter.status}\n            onChange={handleStatusChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filter.query}\n          onChange={handleInputChange}\n\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {filter.query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClear}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as TodoActions } from '../../features/currentTodo';\nimport { getUser } from '../../api';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const dispatch = useAppDispatch();\n\n  const handleCloseModal = () => dispatch(TodoActions.removeTodo());\n\n  useEffect(() => {\n    setIsLoading(true);\n    getUser(todo.userId)\n      .then(setUser)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleCloseModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n              {' by '}\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions } from './features/todos';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const todosFromServer = useAppSelector(state => state.todos);\n  const todoStatus = useAppSelector(state => state.filter);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    getTodos()\n      .then((todos) => dispatch(actions.setTodos(todos)));\n  }, []);\n\n  const prepareQuery = (todo: Todo) => todo.title.toLowerCase().includes(todoStatus.query.toLowerCase());\n\n  const filteredTodos = useMemo(() => {\n    return todosFromServer.filter(todo => {\n      const preparedQuery = prepareQuery(todo);\n\n      switch (todoStatus.status) {\n        case 'completed':\n          return todo.completed && preparedQuery;\n\n        case 'active':\n          return !todo.completed && preparedQuery;\n\n        case 'all':\n        default:\n          return preparedQuery;\n      }\n    });\n  }, [todoStatus.query, todoStatus.status, todosFromServer]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {todosFromServer.length === 0\n                ? <Loader />\n                : <TodoList todos={filteredTodos} />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && <TodoModal todo={selectedTodo} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}